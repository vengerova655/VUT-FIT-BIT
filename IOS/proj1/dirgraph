#!/bin/sh
#author: xvenge01@stud.fit.vutbr.cz
POSIXLY_CORRECT=yes


#< 100 B
FSHIST["0"]=0
#< 1 KiB
FSHIST["1"]=0
#< 10 KiB
FSHIST["2"]=0
#< 100 KiB
FSHIST["3"]=0
#< 1 MiB
FSHIST["4"]=0
#< 10 MiB
FSHIST["5"]=0
#< 100 MiB
FSHIST["6"]=0
#< 1 GiB
FSHIST["7"]=0
#>= 1 GiB
FSHIST["8"]=0

#if output normalized
NORMALIZE=0

#Regex
FILE_ERE=''

#Directory count
ND=0

#Files count
NF=0

#Current directory
DIR="$PWD"

val="0"
#function for printing hashes
print_hash()
{
  #variable for iteration
  i=0
  
  #For normalization -> percentage of the line is 1 hash
  VAL=$1
  
  #number of hashes
  COUNT=$2
  shift; shift;
  
  #if not normalized 1 hash = 1 file
  if [ $NORMALIZE -eq 0 ]; then
  	if [ $COUNT -ne 0 ]; then
  		while [ $COUNT -gt $i ]
		  do
		  	printf "#"
		  	#iterate
		  	i=$(($i+1))
		  done
	fi
	printf "\n"
  else
  	#rounding up the percentage-> how many hashes there are supposed ot be
	  VAL=$(echo $VAL*$COUNT +.5 | bc); VAL=${VAL%.*}
	  	#if empty -> not enough files to show in normalized output
		if [ "$VAL" == '' ];then
			if [ $COUNT -ne 0 ]; then
		  		while [ $COUNT -gt $i ]
				  do
				  	printf "#"
				  	#iterate
				  	i=$(($i+1))
				  done
			fi
		printf "\n"
	  else
		  while [ $VAL -gt $i ]
		  do
		  	printf "#"
		  	i=$(($i+1))
		  done
		printf "\n"
	  fi 
  fi
}



#processes input 
while getopts ni: var
do	case "$var" in
	i)	FILE_ERE="$OPTARG";;
	n)	NORMALIZE=1;;
	?)	echo "Bad input" >&2
		exit 1;;
	esac
done
shift "$(($OPTIND -1))"

#Controls number of arguments
if [ $# -gt 1 ] ; then
	echo "Error -> too many arguments" >&2
	exit 1
fi


#last argument is Directory, others are shifted
if [ "$1" != "" ]; then
	DIR=$1
fi

#checks if FILE_ERE is non empty 
if [ -n "$FILE_ERE" ]; then	
	#check if DIR contains FILE_ERE 
	if  echo $DIR | grep -q  "$FILE_ERE" ;then 
		echo "ERROR-> cannot ignore from directory" >&2
		exit 1
	fi
fi


#check if DIR is directory
if [ ! -d "$DIR" ]; then
	echo "ERROR-> directory $DIR does not exist" >&2
	exit 1
fi



#processess all files and directories, find at end of while so it does not run in subshell
#values of variables are changing
while read filename; do
	#is readable
	if [ -r "$filename" ]; then
	
		if [ -n "$FILE_ERE" ]; then	
			#check if file contains FILE_ERE 
			if  echo $filename | grep -q  "$FILE_ERE" ;then
				continue
			fi
		fi
	
	
		#checks if is directory
		if [ -d "$filename" ]; then
			#increments number of directories
			ND=$((${ND}+1))
		
		#check if is file
		elif [ -f "$filename" ]; then
			#increments number of files
			NF=$((${NF}+1))
			
			#gets size of file
			size=$(($(wc -c < "$filename")))
			#increments category into which file belongs
			if [ "$size" -lt 100 ]; then
			 	FSHIST["0"]=$((${FSHIST["0"]}+1))	 	
			 	
			elif [ "$size" -lt 1024 ]; then
				FSHIST["1"]=$((${FSHIST["1"]}+1))			
				
			elif [ "$size" -lt 10240 ]; then
				FSHIST["2"]=$((${FSHIST["2"]}+1))
				
			elif [ "$size" -lt 102400 ]; then
				FSHIST["3"]=$((${FSHIST["3"]}+1))
				
			elif [ "$size" -lt 1048576 ]; then
				FSHIST["4"]=$((${FSHIST["4"]}+1))
				
			elif [ "$size" -lt 110485760 ]; then
				FSHIST["5"]=$((${FSHIST["5"]}+1))
				
			elif [ "$size" -lt 1104857600 ]; then
				FSHIST["6"]=$((${FSHIST["6"]}+1))
				
			elif [ "$size" -lt 1073741824 ]; then
				FSHIST["7"]=$((${FSHIST["7"]}+1))
				
			else
				FSHIST["8"]=$((${FSHIST["8"]}+1))
				
			fi
		fi
	fi
done <<<$(find $DIR -type f -or -type d)




#if should be normalized
if [ $NORMALIZE -eq 1 ]; then

	#if to terminal
	if [ -t 1 ]; then
		line_length=$(tput cols)
		#from specification '\n' at the end
		line_length=$(($line_length-1))
	else
		#if to file->78
		line_length=78
	fi
	
	#maximum number of files -> which category
	MAX=0
	#checks all FSHIST[@]
	for i in "${FSHIST[@]}";
	do
		if [ $MAX -lt $i ]; then
			#sets new maximum
			MAX=$i
		fi
	done
	
	
	#if output needs to be altered to be normalized
	if [ $MAX -gt $line_length ]; then
		#12 -> formated output -> each line at teh beggining same amount of char
		line_length=$(($line_length-12))
		#get percentage of 1 hash representation
		val="scale=2;$line_length/$MAX"
	fi
fi


#output
echo "Root directory: $DIR"
echo "Directories: $ND"
echo "All files: $NF"
echo "File size histogram:"
printf "  <100 B  : " ; print_hash "$val" "${FSHIST["0"]}"
printf "  <1 KiB  : " ; print_hash "$val" "${FSHIST["1"]}"
printf "  <10 KiB : " ; print_hash "$val" "${FSHIST["2"]}"
printf "  <100 KiB: " ; print_hash "$val" "${FSHIST["3"]}"
printf "  <1 MiB  : " ; print_hash "$val" "${FSHIST["4"]}"
printf "  <10 MiB : " ; print_hash "$val" "${FSHIST["5"]}"
printf "  <100 MiB: " ; print_hash "$val" "${FSHIST["6"]}"
printf "  <1 GiB  : " ; print_hash "$val" "${FSHIST["7"]}"
printf "  >=1 GiB : " ; print_hash "$val" "${FSHIST["8"]}"
